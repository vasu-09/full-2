server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: ${SPRING_APPLICATION_NAME:api-gateway}
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  config:
    import: "optional:configserver:"




  cloud:
    gateway:
      routes:
        - id: auth-service
          uri: lb://AUTHENTICATION-SERVICE          # service ID is stable; keep literal
          predicates:
            - Path=/auth/**,/user/**,/contacts/**,/.well-known/jwks.json,/v1/keys/**,/webhooks/sms-dlr,
#          filters:
#            - StripPrefix=1

        - id: notification-service
          uri: lb://NOTIFICATION-SERVICE
          predicates:
            - Path=/notifications/**


        - id: rtc-service
          uri: ${RTC_WS_URI:lb:ws://REAL-TIME-COMMUNICATION}  # websocket route; env overrideable
          predicates:
            - Path=/rtc/**,/ws/**,/api/search/**,/api/blocks/**,/api/calls/**,/api/dm/**,/api/e2ee/**,/api/media/**,/api/message/**,/api/messages/**,/api/readmodel/**,/api/rooms/**


        - id: todo-service
          uri: lb://TO-DO-LIST-SERVICE
          predicates:
            - Path=/api/v1/payments/**,/api/lists/**


      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_FIRST

      httpclient:
        connect-timeout: ${GATEWAY_CONNECT_TIMEOUT_MS:5000}
        response-timeout: ${GATEWAY_RESPONSE_TIMEOUT:10s}

      globalcors:
        corsConfigurations:
          "[/**]":
            allowedOrigins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}
            allowedMethods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,PATCH,DELETE,OPTIONS}
            allowedHeaders: ${CORS_ALLOWED_HEADERS:*}
            exposedHeaders: ${CORS_EXPOSED_HEADERS:Authorization,Content-Type}
            allowCredentials: ${CORS_ALLOW_CREDENTIALS:true}
            maxAge: ${CORS_MAX_AGE:3600}

  security:
    oauth2:
      resourceserver:
        jwt:
#          jwk-set-uri: ${JWT_JWKS_URI:http://localhost:8092/.well-known/jwks.json}
          issuer-uri: ${JWT_ISSUER:http://localhost:8092}
#          jwk-set-uri: http://localhost:8092/.well-known/jwks.json
jwt:
  audience: ${JWT_AUDIENCE:}

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: ${EUREKA_INSTANCE_PREFER_IP_ADDRESS:true}

management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:health,info,prometheus}

rate:
  limit:
    requests: 60
    window-seconds: 60

gateway:
  custom-jwt:
    enabled: false

